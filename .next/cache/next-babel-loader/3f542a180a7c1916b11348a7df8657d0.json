{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\todo\\\\TodoList.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { connect } from 'react-redux';\nimport { getSortedTodos } from '../../actions/todoActions';\nimport TodoListItem from './TodoListItem';\n\nconst TodoList = ({\n  todos,\n  inputRef,\n  todo: {\n    currentTodo\n  },\n  getSortedTodos\n}) => {\n  const reorder = (list, startIndex, endIndex) => {\n    const result = _Array$from(list);\n\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }; // BEAUTIFUL DND\n\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n    const updatedTodos = reorder(todos, result.source.index, result.destination.index);\n    getSortedTodos(updatedTodos);\n  };\n\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"TodoList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, todos && todos.length > 0 ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \" ToDos completed:\", React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, todos.filter(todo => todo.completed === true).length, \" of \", todos.length)) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \" No Todo yet!\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Add a todo and \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"double click\"), \" to change the status\"))), React.createElement(\"div\", {\n    className: \"TodoList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"TodoList TodoList__ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Droppable, {\n    droppableId: \"droppable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(\"div\", _extends({}, provided.droppableProps, {\n    ref: provided.innerRef,\n    className: snapshot.isDraggingOver ? 'TodoList__draggingOver' : 'TodList__notdraggingOver',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), todos && todos.map((todo, index) => React.createElement(TodoListItem, {\n    key: todo._id,\n    todo: todo,\n    currentTodo: currentTodo,\n    inputRef: inputRef,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), provided.placeholder)))));\n};\n\nTodoList.propTypes = {\n  todo: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todo: state.todo\n});\n\nexport default connect(mapStateToProps, {\n  getSortedTodos\n})(TodoList);","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\todo\\TodoList.js"],"names":["React","Fragment","PropTypes","DragDropContext","Droppable","connect","getSortedTodos","TodoListItem","TodoList","todos","inputRef","todo","currentTodo","reorder","list","startIndex","endIndex","result","removed","splice","onDragEnd","destination","source","draggableId","droppableId","index","updatedTodos","length","filter","completed","provided","snapshot","droppableProps","innerRef","isDraggingOver","map","_id","placeholder","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\"; \r\nimport { connect } from 'react-redux';\r\nimport { getSortedTodos } from '../../actions/todoActions';\r\nimport TodoListItem from './TodoListItem';\r\n\r\n\r\nconst TodoList = ({ todos, inputRef, todo: { currentTodo }, getSortedTodos}) => {\r\n\r\n    const reorder = (list, startIndex, endIndex) => {\r\n        const result = Array.from(list);\r\n        const [removed] = result.splice(startIndex,1);\r\n        result.splice(endIndex, 0 ,removed);\r\n\r\n        return result\r\n    }\r\n\r\n    // BEAUTIFUL DND\r\n    const onDragEnd = result => {\r\n       const { destination, source, draggableId } = result;\r\n       if(!destination) return;\r\n\r\n       if( destination.droppableId === source.droppableId && destination.index === source.index ) return;\r\n\r\n       const updatedTodos = reorder(\r\n            todos,\r\n            result.source.index,\r\n            result.destination.index\r\n       );\r\n        getSortedTodos(updatedTodos);\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n    <DragDropContext \r\n        onDragEnd = { onDragEnd } \r\n    >\r\n    <div className = \"TodoList\">\r\n        {\r\n            todos && todos.length > 0 ?\r\n                <h2> ToDos completed: \r\n                    <div className = \"\">\r\n                        { todos.filter(todo => todo.completed === true).length } of { todos.length }  \r\n                    </div>   \r\n                </h2> :\r\n                <Fragment>\r\n                    <h2> No Todo yet!</h2>\r\n                    <p>Add a todo and <strong>double click</strong> to change the status</p> \r\n                </Fragment>\r\n              \r\n        }\r\n    </div>\r\n \r\n    <div className = \"TodoList\">\r\n    <ul className = \"TodoList TodoList__ul\">\r\n        <Droppable droppableId = 'droppable'>\r\n        { (provided, snapshot) => (\r\n            <div\r\n                {...provided.droppableProps}\r\n                ref = {provided.innerRef}   \r\n                className = {snapshot.isDraggingOver ? 'TodoList__draggingOver': 'TodList__notdraggingOver'}\r\n            >\r\n            { todos && todos.map( (todo, index) => ( <TodoListItem key = {todo._id} todo = {todo} currentTodo = {currentTodo} inputRef = { inputRef } index = { index } /> )) }\r\n            {provided.placeholder}\r\n            </div>\r\n        )}\r\n        </Droppable>\r\n    </ul>\r\n    </div>\r\n   \r\n    </DragDropContext>\r\n       \r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    todo: state.todo\r\n})\r\n\r\nexport default connect(mapStateToProps, { getSortedTodos })(TodoList)\r\n"]},"metadata":{},"sourceType":"module"}