{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { GOOGLE_SEARCH, GOOGLE_SEARCH_ERROR, CLEAR_GOOGLE_SEARCH } from './types';\nexport var googleCustomSearch = function googleCustomSearch(query) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios.get(\"/api/gcse/\".concat(query));\n\n              case 3:\n                res = _context.sent;\n\n                if (res === null || res === [] || res === '') {\n                  dispatch({\n                    type: GOOGLE_SEARCH_ERROR,\n                    payload: {\n                      msg: 'No Search Results'\n                    }\n                  });\n                } else {\n                  dispatch({\n                    type: GOOGLE_SEARCH,\n                    payload: {\n                      searchResults: res.data,\n                      query: query\n                    }\n                  });\n                }\n\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n                dispatch({\n                  type: GOOGLE_SEARCH_ERROR,\n                  payload: {\n                    msg: 'Oops, could not find what you were searching for!'\n                  }\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var clearGoogleCustomSearch = function clearGoogleCustomSearch() {\n  return function (dispatch) {\n    try {\n      dispatch({\n        type: CLEAR_GOOGLE_SEARCH\n      });\n    } catch (error) {\n      console.error('Could not clear the search results', error);\n    }\n  };\n};","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\actions\\searchActions.js"],"names":["axios","GOOGLE_SEARCH","GOOGLE_SEARCH_ERROR","CLEAR_GOOGLE_SEARCH","googleCustomSearch","query","dispatch","get","res","type","payload","msg","searchResults","data","console","error","clearGoogleCustomSearch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,mBAAxB,EAA6CC,mBAA7C,QAAwE,SAAxE;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAGjBN,KAAK,CAACO,GAAN,qBAAuBF,KAAvB,EAHiB;;AAAA;AAG7BG,gBAAAA,GAH6B;;AAInC,oBAAGA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,EAAxB,IAA8BA,GAAG,KAAK,EAAzC,EAA4C;AACxCF,kBAAAA,QAAQ,CAAC;AACLG,oBAAAA,IAAI,EAAEP,mBADD;AAELQ,oBAAAA,OAAO,EAAE;AAACC,sBAAAA,GAAG,EAAE;AAAN;AAFJ,mBAAD,CAAR;AAIH,iBALD,MAKO;AACHL,kBAAAA,QAAQ,CAAC;AACLG,oBAAAA,IAAI,EAAER,aADD;AAELS,oBAAAA,OAAO,EAAE;AACLE,sBAAAA,aAAa,EAACJ,GAAG,CAACK,IADb;AAELR,sBAAAA,KAAK,EAACA;AAFD;AAFJ,mBAAD,CAAR;AAOH;;AAjBkC;AAAA;;AAAA;AAAA;AAAA;AAoBnCS,gBAAAA,OAAO,CAACC,KAAR;AACAT,gBAAAA,QAAQ,CAAC;AACLG,kBAAAA,IAAI,EAAEP,mBADD;AAELQ,kBAAAA,OAAO,EAAE;AAACC,oBAAAA,GAAG,EAAE;AAAN;AAFJ,iBAAD,CAAR;;AArBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;AA4BP,OAAO,IAAMK,uBAAuB,GAAG,SAA1BA,uBAA0B;AAAA,SAAM,UAAAV,QAAQ,EAAI;AACrD,QAAI;AACAA,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAEN;AADD,OAAD,CAAR;AAGH,KAJD,CAIE,OAAOY,KAAP,EAAc;AACZD,MAAAA,OAAO,CAACC,KAAR,CAAc,oCAAd,EAAoDA,KAApD;AACH;AACJ,GARsC;AAAA,CAAhC","sourcesContent":["import axios from 'axios';\r\nimport { GOOGLE_SEARCH, GOOGLE_SEARCH_ERROR, CLEAR_GOOGLE_SEARCH } from './types';\r\n\r\nexport const googleCustomSearch = query => async dispatch => {\r\n\r\n    try {\r\n        const res = await axios.get(`/api/gcse/${query}`);\r\n        if(res === null || res === [] || res === ''){\r\n            dispatch({\r\n                type: GOOGLE_SEARCH_ERROR,\r\n                payload: {msg: 'No Search Results'}\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: GOOGLE_SEARCH,\r\n                payload: {\r\n                    searchResults:res.data,\r\n                    query:query\r\n                }\r\n            })\r\n        }\r\n    \r\n    } catch (error) {\r\n        console.error(error);\r\n        dispatch({\r\n            type: GOOGLE_SEARCH_ERROR,\r\n            payload: {msg: 'Oops, could not find what you were searching for!'}\r\n        })\r\n    }\r\n}\r\n\r\nexport const clearGoogleCustomSearch = () => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: CLEAR_GOOGLE_SEARCH\r\n        })\r\n    } catch (error) {\r\n        console.error('Could not clear the search results', error)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}