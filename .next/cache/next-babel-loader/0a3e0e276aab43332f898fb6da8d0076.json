{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\article\\\\FullArticleRichText.js\";\nimport React from 'react';\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\nimport FullArticleCode from './FullArticleCode';\n\nconst FullArticleRichText = ({\n  nodeContent,\n  language\n}) => {\n  // this is the rtf node;\n  const document = nodeContent; // Rendering options\n\n  const Bold = ({\n    children\n  }) => React.createElement(\"span\", {\n    className: \"FullArticleRichText__bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, children);\n\n  const Underline = ({\n    children\n  }) => React.createElement(\"span\", {\n    className: \"FullArticleRichText__underline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, children);\n\n  const Italic = ({\n    children\n  }) => React.createElement(\"span\", {\n    className: \"FullArticleRichText__italic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, children);\n\n  const Code = ({\n    children\n  }) => React.createElement(\"span\", {\n    style: {\n      fontSize: '1.6rem'\n    },\n    className: \"FullArticleRichText__code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, children);\n\n  const options = {\n    renderMark: {\n      [MARKS.UNDERLINE]: text => React.createElement(Underline, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, text),\n      [MARKS.BOLD]: text => React.createElement(Bold, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, text),\n      [MARKS.ITALICS]: text => React.createElement(Italic, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, text),\n      [MARKS.CODE]: text => React.createElement(Code, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, ' ', React.createElement(FullArticleCode, {\n        language: language,\n        code: text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), ' ')\n    },\n    renderNode: {\n      [BLOCKS.PARAGRAPH]: (node, children) => React.createElement(\"p\", {\n        className: paragraphClass(node),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, children)\n    }\n  }; // For paragraph nodes that are empty apply this css style to it\n\n  function paragraphClass(node) {\n    let className;\n\n    if (node.content[0].value === '') {\n      className = 'FullArticleRichText__padding';\n    } //alternate logic for 'odd' | 'even'\n\n\n    return className;\n  } // black magic that contentful does when passing in the rtf document node abd the options defined above\n\n\n  const rtf = documentToReactComponents(document, options);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, rtf);\n};\n\nexport default FullArticleRichText;","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\article\\FullArticleRichText.js"],"names":["React","BLOCKS","MARKS","documentToReactComponents","FullArticleCode","FullArticleRichText","nodeContent","language","document","Bold","children","Underline","Italic","Code","fontSize","options","renderMark","UNDERLINE","text","BOLD","ITALICS","CODE","renderNode","PARAGRAPH","node","paragraphClass","className","content","value","rtf"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,6BAA9B;AACA,SAASC,yBAAT,QAA0C,sCAA1C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA+B;AACzD;AACA,QAAMC,QAAQ,GAAGF,WAAjB,CAFyD,CAIzD;;AAEA,QAAMG,IAAI,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACX;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CA,QAA7C,CADF;;AAGA,QAAMC,SAAS,GAAG,CAAC;AAAED,IAAAA;AAAF,GAAD,KAChB;AAAM,IAAA,SAAS,EAAC,gCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkDA,QAAlD,CADF;;AAGA,QAAME,MAAM,GAAG,CAAC;AAAEF,IAAAA;AAAF,GAAD,KACb;AAAM,IAAA,SAAS,EAAC,6BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CA,QAA/C,CADF;;AAGA,QAAMG,IAAI,GAAG,CAAC;AAAEH,IAAAA;AAAF,GAAD,KACX;AAAM,IAAA,KAAK,EAAI;AAACI,MAAAA,QAAQ,EAAC;AAAV,KAAf;AAAoC,IAAA,SAAS,EAAC,2BAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2EJ,QAA3E,CADF;;AAIA,QAAMK,OAAO,GAAG;AACdC,IAAAA,UAAU,EAAE;AACV,OAACd,KAAK,CAACe,SAAP,GAAmBC,IAAI,IAAI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAYA,IAAZ,CADjB;AAEV,OAAChB,KAAK,CAACiB,IAAP,GAAcD,IAAI,IAAI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,IAAP,CAFZ;AAGV,OAAChB,KAAK,CAACkB,OAAP,GAAiBF,IAAI,IAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAASA,IAAT,CAHf;AAIV,OAAChB,KAAK,CAACmB,IAAP,GAAcH,IAAI,IAChB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,GADH,EAEE,oBAAC,eAAD;AAAiB,QAAA,QAAQ,EAAEX,QAA3B;AAAqC,QAAA,IAAI,EAAEW,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAEsD,GAFtD;AALQ,KADE;AAYdI,IAAAA,UAAU,EAAE;AACV,OAACrB,MAAM,CAACsB,SAAR,GAAoB,CAACC,IAAD,EAAOd,QAAP,KAClB;AAAG,QAAA,SAAS,EAAEe,cAAc,CAACD,IAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqCd,QAArC;AAFQ;AAZE,GAAhB,CAnByD,CAsCzD;;AACA,WAASe,cAAT,CAAwBD,IAAxB,EAA8B;AAC5B,QAAIE,SAAJ;;AAEA,QAAIF,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgBC,KAAhB,KAA0B,EAA9B,EAAkC;AAChCF,MAAAA,SAAS,GAAG,8BAAZ;AACD,KAL2B,CAO5B;;;AACA,WAAOA,SAAP;AACD,GAhDwD,CAkDzD;;;AACA,QAAMG,GAAG,GAAG1B,yBAAyB,CAACK,QAAD,EAAWO,OAAX,CAArC;AAGA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMc,GAAN,CAAP;AACD,CAvDD;;AAyDA,eAAexB,mBAAf","sourcesContent":["import React from 'react';\r\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\r\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\r\nimport FullArticleCode from './FullArticleCode';\r\n\r\nconst FullArticleRichText = ({ nodeContent, language }) => {\r\n  // this is the rtf node;\r\n  const document = nodeContent;\r\n\r\n  // Rendering options\r\n\r\n  const Bold = ({ children }) => (\r\n    <span className=\"FullArticleRichText__bold\">{children}</span>\r\n  );\r\n  const Underline = ({ children }) => (\r\n    <span className=\"FullArticleRichText__underline\">{children}</span>\r\n  );\r\n  const Italic = ({ children }) => (\r\n    <span className=\"FullArticleRichText__italic\">{children}</span>\r\n  );\r\n  const Code = ({ children }) => (\r\n    <span style = {{fontSize:'1.6rem'}} className=\"FullArticleRichText__code\">{children}</span>\r\n  );\r\n\r\n  const options = {\r\n    renderMark: {\r\n      [MARKS.UNDERLINE]: text => <Underline>{text}</Underline>,\r\n      [MARKS.BOLD]: text => <Bold>{text}</Bold>,\r\n      [MARKS.ITALICS]: text => <Italic>{text}</Italic>,\r\n      [MARKS.CODE]: text => (\r\n        <Code>\r\n          {' '}\r\n          <FullArticleCode language={language} code={text} />{' '}\r\n        </Code>\r\n      )\r\n    },\r\n    renderNode: {\r\n      [BLOCKS.PARAGRAPH]: (node, children) => (\r\n        <p className={paragraphClass(node)}>{children}</p>\r\n      )\r\n    }\r\n  };\r\n\r\n  // For paragraph nodes that are empty apply this css style to it\r\n  function paragraphClass(node) {\r\n    let className;\r\n\r\n    if (node.content[0].value === '') {\r\n      className = 'FullArticleRichText__padding';\r\n    }\r\n\r\n    //alternate logic for 'odd' | 'even'\r\n    return className;\r\n  }\r\n\r\n  // black magic that contentful does when passing in the rtf document node abd the options defined above\r\n  const rtf = documentToReactComponents(document, options);\r\n\r\n\r\n  return <div>{rtf}</div>;\r\n};\r\n\r\nexport default FullArticleRichText;\r\n"]},"metadata":{},"sourceType":"module"}