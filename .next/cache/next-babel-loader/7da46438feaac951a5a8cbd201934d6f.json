{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\utils\\\\form\\\\FileUpload.js\";\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nconst maxFileSize = 1000000; // max size in bytes. ~ 10 megabyte.\n\nclass FileUpload extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      uploadedFiles: [],\n      uploading: false\n    });\n\n    _defineProperty(this, \"handleOnDrop\", (files, rejectedFiles) => {\n      if (files && files.length > 0) {\n        let formData = new FormData();\n        formData.append(\"file\", files[0]);\n        axios.post('/api/users/uploadimage', formData).then(response => {\n          this.setState({\n            uploading: false,\n            uploadedFiles: [...this.state.uploadedFiles, response.data]\n          }); // save this into the resume database.\n        }).catch(err => console.log('there was an error with upload'));\n      }\n\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        if (rejectedFiles[0].size > maxFileSize) {\n          alert('File is to big!');\n        } else {\n          alert('Upload must be an image!');\n        }\n      }\n    });\n  }\n\n  render() {\n    const {\n      uploadedFiles\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"fileupload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"fileupload__drag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onDrop: this.handleOnDrop,\n      maxSize: maxFileSize,\n      className: \"fileupload__dropzone\",\n      multiple: this.props.multiple,\n      accept: \"image/*\" // accept all images\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: \"plus-circle\",\n      style: {\n        color: 'black',\n        cursor: 'pointer',\n        fontSize: '4.5rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \" drag and drop file \"))), React.createElement(\"div\", {\n      className: \"fileupload__show\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, uploadedFiles.length > 0 ? React.createElement(\"div\", {\n      className: \"fileupload__imagesContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, uploadedFiles.map(file => React.createElement(\"div\", {\n      className: \"fileupload__images\",\n      key: file.public_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: file.url,\n      alt: \"Uploaded File\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })))) : null));\n  }\n\n}\n\nFileUpload.defaultProps = {\n  multiple: false\n};\nexport default FileUpload;","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\utils\\form\\FileUpload.js"],"names":["React","Component","FontAwesomeIcon","Dropzone","axios","maxFileSize","FileUpload","uploadedFiles","uploading","files","rejectedFiles","length","formData","FormData","append","post","then","response","setState","state","data","catch","err","console","log","size","alert","render","handleOnDrop","props","multiple","color","cursor","fontSize","map","file","public_id","url","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Dropzone from 'react-dropzone';\r\nimport axios from 'axios';\r\n\r\nconst maxFileSize = 1000000; // max size in bytes. ~ 10 megabyte.\r\nclass FileUpload extends Component {\r\n\r\n    state = {\r\n        uploadedFiles:[],\r\n        uploading:false\r\n    }\r\n\r\n    handleOnDrop = ( files,rejectedFiles ) => {\r\n        if(files && files.length > 0) {\r\n            let formData = new FormData();\r\n            formData.append(\"file\",files[0]);\r\n            axios.post('/api/users/uploadimage',formData)\r\n                .then( response => {\r\n                    this.setState({\r\n                        uploading:false,\r\n                        uploadedFiles:[\r\n                            ...this.state.uploadedFiles,\r\n                            response.data\r\n                        ]\r\n                    })\r\n                // save this into the resume database.\r\n                })\r\n                .catch ( err => console.log('there was an error with upload'))\r\n        }\r\n        if(rejectedFiles && rejectedFiles.length > 0){\r\n            if(rejectedFiles[0].size > maxFileSize){\r\n                alert('File is to big!');\r\n            }\r\n            else {\r\n                alert('Upload must be an image!');\r\n            }\r\n        }\r\n       \r\n    }\r\n\r\n\r\n    render() {\r\n        const { uploadedFiles } = this.state;\r\n        return (\r\n            <div className = \"fileupload\" >\r\n                        \r\n                     \r\n                    <div className=\"fileupload__drag\">\r\n                            <Dropzone\r\n                                onDrop = { this.handleOnDrop }\r\n                                maxSize = {maxFileSize}\r\n                                className = \"fileupload__dropzone\"\r\n                                multiple = {this.props.multiple}\r\n                                accept = \"image/*\" // accept all images\r\n                               \r\n                            >\r\n                                <FontAwesomeIcon\r\n                                        icon=\"plus-circle\"\r\n                                        style = {{color:'black', cursor:'pointer',fontSize: '4.5rem'}}\r\n                                />\r\n                                <p> drag and drop file </p>\r\n                             \r\n                            </Dropzone>\r\n\r\n                           \r\n                    </div>\r\n                    \r\n                    <div className = \"fileupload__show\">\r\n                            {\r\n                                    uploadedFiles.length > 0 ?\r\n                                            <div className = \"fileupload__imagesContainer\">\r\n                                            {\r\n                                                uploadedFiles.map( file => (\r\n                                                    <div className = \"fileupload__images\"\r\n                                                        key = {file.public_id}\r\n                                                    >\r\n                                                        <img src={file.url} alt=\"Uploaded File\"/>\r\n                                                    </div>\r\n                                                ))\r\n                                            }\r\n                                            </div>\r\n                                        \r\n                                            : null\r\n                            }\r\n                    </div>\r\n\r\n                    \r\n\r\n                     \r\n                       \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFileUpload.defaultProps = {\r\n    multiple: false\r\n  };\r\n\r\nexport default FileUpload;\r\n\r\n"]},"metadata":{},"sourceType":"module"}