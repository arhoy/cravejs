{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { GET_POST, GET_POSTS, POST_LOADING, DELETE_POST, ADD_POST, LIKE_POST, GET_REPLIES, GET_REPLY } from '../actions/types';\nvar initialState = {\n  posts: [],\n  post: {},\n  loading: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case POST_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: action.payload,\n        loading: false\n      });\n\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: action.payload,\n        loading: false\n      });\n\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [action.payload].concat(_toConsumableArray(state.posts))\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(function (post) {\n          return post._id !== action.payload;\n        })\n      });\n\n    case GET_REPLY:\n      // get reply action.payload has a postId and a replyObj.\n      var postIndex = state.posts.map(function (item) {\n        return item._id.toString();\n      }).indexOf(action.payload.postId);\n      console.log(action.payload);\n      console.log(postIndex);\n      var post = state.posts[postIndex];\n      return _objectSpread({}, state, {\n        post: post.replies.filter(function (reply) {\n          return reply._id === action.payload.replyObj._id;\n        })\n      });\n\n    case GET_REPLIES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(function (post) {\n          return _objectSpread({}, post, action.payload);\n        })\n      });\n\n    case LIKE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(function (post) {\n          if (post._id === action.payload._id) {\n            return _objectSpread({}, post, action.payload);\n          } else {\n            return post;\n          }\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\reducers\\postReducer.js"],"names":["GET_POST","GET_POSTS","POST_LOADING","DELETE_POST","ADD_POST","LIKE_POST","GET_REPLIES","GET_REPLY","initialState","posts","post","loading","state","action","type","payload","filter","_id","postIndex","map","item","toString","indexOf","postId","console","log","replies","reply","replyObj"],"mappings":";;AAAA,SACIA,QADJ,EAEIC,SAFJ,EAGIC,YAHJ,EAIIC,WAJJ,EAKIC,QALJ,EAMIC,SANJ,EAOIC,WAPJ,EAQIC,SARJ,QASS,kBATT;AAYA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,EADW;AAEjBC,EAAAA,IAAI,EAAC,EAFY;AAGjBC,EAAAA,OAAO,EAAC;AAHS,CAArB;AAMA,eAAe,YAAyC;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AACpD,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKZ,YAAL;AACI,+BACOU,KADP;AAEID,QAAAA,OAAO,EAAC;AAFZ;;AAIJ,SAAKX,QAAL;AACI,+BACOY,KADP;AAEIF,QAAAA,IAAI,EAACG,MAAM,CAACE,OAFhB;AAGIJ,QAAAA,OAAO,EAAC;AAHZ;;AAKJ,SAAKV,SAAL;AACI,+BACOW,KADP;AAEIH,QAAAA,KAAK,EAACI,MAAM,CAACE,OAFjB;AAGIJ,QAAAA,OAAO,EAAC;AAHZ;;AAKJ,SAAKP,QAAL;AACI,+BACOQ,KADP;AAEIH,QAAAA,KAAK,GAAEI,MAAM,CAACE,OAAT,4BAAoBH,KAAK,CAACH,KAA1B;AAFT;;AAIJ,SAAKN,WAAL;AACI,+BACOS,KADP;AAEIH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAoB,UAAAN,IAAI;AAAA,iBAAIA,IAAI,CAACO,GAAL,KAAaJ,MAAM,CAACE,OAAxB;AAAA,SAAxB;AAFX;;AAKJ,SAAKR,SAAL;AACA;AACI,UAAMW,SAAS,GAAGN,KAAK,CAACH,KAAN,CAAYU,GAAZ,CAAiB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACH,GAAL,CAASI,QAAT,EAAJ;AAAA,OAArB,EAA+CC,OAA/C,CAAuDT,MAAM,CAACE,OAAP,CAAeQ,MAAtE,CAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAM,CAACE,OAAnB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACA,UAAMR,IAAI,GAAGE,KAAK,CAACH,KAAN,CAAYS,SAAZ,CAAb;AAEA,+BACON,KADP;AAEKF,QAAAA,IAAI,EAAEA,IAAI,CAACgB,OAAL,CAAaV,MAAb,CAAqB,UAAAW,KAAK;AAAA,iBAAIA,KAAK,CAACV,GAAN,KAAcJ,MAAM,CAACE,OAAP,CAAea,QAAf,CAAwBX,GAA1C;AAAA,SAA1B;AAFX;;AAIJ,SAAKX,WAAL;AACI,+BACOM,KADP;AAEIH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYU,GAAZ,CAAgB,UAAAT,IAAI,EAAI;AAC3B,mCACOA,IADP,EAEOG,MAAM,CAACE,OAFd;AAIH,SALM;AAFX;;AAUJ,SAAKV,SAAL;AACI,+BACOO,KADP;AAEIH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYU,GAAZ,CAAgB,UAAAT,IAAI,EAAI;AAC/B,cAAIA,IAAI,CAACO,GAAL,KAAaJ,MAAM,CAACE,OAAP,CAAeE,GAAhC,EAAqC;AACjC,qCACGP,IADH,EAEGG,MAAM,CAACE,OAFV;AAIH,WALD,MAKO;AACH,mBAAOL,IAAP;AACH;AACA,SATM;AAFX;;AAeJ;AACI,aAAOE,KAAP;AArER;AAuEH","sourcesContent":["import {\r\n    GET_POST,\r\n    GET_POSTS,\r\n    POST_LOADING,\r\n    DELETE_POST,\r\n    ADD_POST,\r\n    LIKE_POST,\r\n    GET_REPLIES,\r\n    GET_REPLY\r\n  } from '../actions/types';\r\n  \r\n\r\nconst initialState = {\r\n    posts:[],\r\n    post:{},\r\n    loading:false\r\n}\r\n\r\nexport default function ( state = initialState, action ){\r\n    switch(action.type){\r\n\r\n        case POST_LOADING:\r\n            return {\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case GET_POST:\r\n            return {\r\n                ...state,\r\n                post:action.payload,\r\n                loading:false\r\n            }\r\n        case GET_POSTS:\r\n            return {\r\n                ...state,\r\n                posts:action.payload,\r\n                loading:false\r\n            }\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts:[action.payload,...state.posts]\r\n            }\r\n        case DELETE_POST:\r\n            return { \r\n                ...state,\r\n                posts: state.posts.filter( post => post._id !== action.payload )\r\n            }\r\n\r\n        case GET_REPLY: \r\n        // get reply action.payload has a postId and a replyObj.\r\n            const postIndex = state.posts.map( item => item._id.toString() ).indexOf(action.payload.postId);\r\n            console.log(action.payload);\r\n            console.log(postIndex);\r\n            const post = state.posts[postIndex];\r\n        \r\n            return {\r\n                ...state,\r\n                 post: post.replies.filter( reply => reply._id === action.payload.replyObj._id) \r\n            }\r\n        case GET_REPLIES:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(post => {\r\n                    return {\r\n                        ...post,\r\n                        ...action.payload\r\n                    }\r\n                })\r\n            }\r\n\r\n        case LIKE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(post => {\r\n                if (post._id === action.payload._id) {\r\n                    return {\r\n                    ...post,\r\n                    ...action.payload\r\n                    };\r\n                } else {\r\n                    return post;\r\n                }\r\n                })\r\n        };\r\n      \r\n     \r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}