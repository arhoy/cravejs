{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\article\\\\FullArticle.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { getArticleByModelAndSlug } from '../../actions/articleActions';\nimport PropTypes from 'prop-types';\nimport FullArticleDetails from './FullArticleDetails';\nimport isEmpty from '../../validation/is-empty';\n\nvar FullArticle = function FullArticle(_ref) {\n  var article = _ref.articles.article,\n      _ref$match$params = _ref.match.params,\n      contentType = _ref$match$params.contentType,\n      slugName = _ref$match$params.slugName,\n      loading = _ref.loading,\n      getArticleByModelAndSlug = _ref.getArticleByModelAndSlug;\n  useEffect(function () {\n    getArticleByModelAndSlug(contentType, slugName);\n  }, []);\n  var articleContent;\n\n  if (loading || isEmpty(article)) {\n    articleContent = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Loading\");\n  } else {\n    var fields = article[0].fields;\n    var image = fields.heroImage.fields;\n    var author = fields.author.fields;\n    var authorImage = author.image.fields.file.url; // update the title of the document\n\n    document.title = fields.title;\n    articleContent = React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Helmet, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \" \", fields.title, \" | CraveJs Article \"), React.createElement(\"meta\", {\n      name: \"description\",\n      content: fields.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(\"meta\", {\n      name: \"keywords\",\n      content: fields.tags,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(\"meta\", {\n      name: \"author\",\n      content: author.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(FullArticleDetails, {\n      key: \"\".concat(fields.title, \" - \").concat(author.name),\n      image: image.file.url,\n      imageTitle: image.title,\n      imageDescription: image.description,\n      articleTitle: fields.title,\n      articleDescription: fields.description,\n      articleBody: fields.body,\n      articleRichText: fields.bodyRichText,\n      authorName: author.name,\n      authorImage: authorImage,\n      published: fields.publishDate,\n      tags: fields.tags,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n  return articleContent;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    articles: state.articles\n  };\n};\n\nFullArticle.propTypes = {\n  getArticleByModelAndSlug: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, {\n  getArticleByModelAndSlug: getArticleByModelAndSlug\n})(withRouter(FullArticle));","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\article\\FullArticle.js"],"names":["React","Fragment","useEffect","Helmet","connect","withRouter","getArticleByModelAndSlug","PropTypes","FullArticleDetails","isEmpty","FullArticle","article","articles","match","params","contentType","slugName","loading","articleContent","fields","image","heroImage","author","authorImage","file","url","document","title","description","tags","name","body","bodyRichText","publishDate","mapStateToProps","state","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet'\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getArticleByModelAndSlug } from '../../actions/articleActions';\r\nimport PropTypes from 'prop-types';\r\nimport FullArticleDetails from './FullArticleDetails';\r\nimport isEmpty from '../../validation/is-empty';\r\n\r\nconst FullArticle = ({ articles: {article}, match: { params: { contentType, slugName } },  loading, getArticleByModelAndSlug }) => {\r\n\r\n    useEffect( ()=> {\r\n      getArticleByModelAndSlug(contentType, slugName);\r\n    },[])\r\n \r\n    let articleContent;\r\n\r\n    if (loading || isEmpty(article)) {\r\n  \r\n      articleContent = <div>Loading</div>;\r\n    } else {\r\n      const { fields } = article[0];\r\n      const image = fields.heroImage.fields;\r\n      const author = fields.author.fields;\r\n      const authorImage = author.image.fields.file.url;\r\n\r\n      // update the title of the document\r\n      document.title = fields.title;\r\n \r\n      articleContent = (\r\n        <Fragment>\r\n           <Helmet>\r\n              <title> { fields.title } | CraveJs Article </title>\r\n              <meta \r\n                  name=\"description\" \r\n                  content = { fields.description } \r\n              />\r\n              <meta name=\"keywords\" content = { fields.tags }></meta>\r\n              <meta name=\"author\" content = { author.name } ></meta>\r\n\r\n            </Helmet>\r\n            <FullArticleDetails\r\n            key = {`${fields.title} - ${author.name}` }\r\n            image={image.file.url}\r\n            imageTitle={image.title}\r\n            imageDescription={image.description}\r\n            articleTitle={fields.title}\r\n            articleDescription={fields.description}\r\n            articleBody={fields.body}\r\n            articleRichText={fields.bodyRichText}\r\n            authorName={author.name}\r\n            authorImage={authorImage}\r\n            published={fields.publishDate}\r\n            tags={fields.tags}\r\n           />\r\n        </Fragment>\r\n     \r\n      );\r\n    }\r\n\r\n    return articleContent;\r\n  }\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  articles: state.articles\r\n});\r\n\r\nFullArticle.propTypes = {\r\n  getArticleByModelAndSlug: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps, { getArticleByModelAndSlug })(withRouter(FullArticle));\r\n"]},"metadata":{},"sourceType":"module"}