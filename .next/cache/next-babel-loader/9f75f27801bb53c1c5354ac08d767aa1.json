{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\posts\\\\replies\\\\ReplyForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextAreaFieldGroup from '../../common/TextAreaFieldGroup';\nimport { addReply, getPosts } from '../../../actions/postActions';\nimport PropTypes from 'prop-types';\nimport isEmpty from '../../../validation/is-empty';\n\nclass ReplyForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      text: '',\n      errors: {}\n    });\n\n    _defineProperty(this, \"onChangeHandler\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmitHandler\", (e, id) => {\n      e.preventDefault();\n      const {\n        user\n      } = this.props.auth;\n      const newReply = {\n        text: this.state.text,\n        name: user.name,\n        avatar: user.avatar\n      };\n      console.log('I replied');\n      this.props.addReply(id, newReply);\n      this.setState({\n        text: ''\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.errors !== prevState.errors) {\n      return {\n        errors: nextProps.errors\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      postItem\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"ReplyForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"ReplyForm__form\",\n      onSubmit: e => this.onSubmitHandler(e, postItem._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form__group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(TextAreaFieldGroup, {\n      placeholder: isEmpty(errors.replyErrors) ? 'Add a reply...' : errors.replyErrors.text,\n      name: \"text\",\n      value: this.state.text,\n      onChange: e => this.onChangeHandler(e),\n      error: errors.text,\n      className: \"form__textarea form__textarea-grey\",\n      rows: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"ReplyForm__button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Submit Reply\")));\n  }\n\n}\n\nReplyForm.propTypes = {\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n  addReply: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors,\n  post: state.post\n});\n\nexport default connect(mapStateToProps, {\n  addReply,\n  getPosts\n})(ReplyForm);","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\posts\\replies\\ReplyForm.js"],"names":["React","Component","connect","TextAreaFieldGroup","addReply","getPosts","PropTypes","isEmpty","ReplyForm","text","errors","e","setState","target","name","value","id","preventDefault","user","props","auth","newReply","state","avatar","console","log","getDerivedStateFromProps","nextProps","prevState","render","postItem","onSubmitHandler","_id","replyErrors","onChangeHandler","propTypes","object","isRequired","func","mapStateToProps","post"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TextAreaFieldGroup from '../../common/TextAreaFieldGroup';\r\nimport { addReply, getPosts } from '../../../actions/postActions';\r\nimport PropTypes from 'prop-types';\r\nimport isEmpty from '../../../validation/is-empty';\r\n\r\n\r\nclass ReplyForm extends Component {\r\n    state = {\r\n        text: '',\r\n        errors:{}\r\n    }\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if(nextProps.errors !== prevState.errors) {\r\n            return {errors: nextProps.errors}\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    onChangeHandler = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    onSubmitHandler = (e,id) => {\r\n        e.preventDefault();\r\n        const { user } = this.props.auth;\r\n        const newReply = {\r\n            text: this.state.text,\r\n            name: user.name,\r\n            avatar: user.avatar\r\n        }\r\n        console.log('I replied');\r\n        this.props.addReply(id,newReply);\r\n        this.setState({text:''});\r\n        \r\n     \r\n    }\r\n    \r\n    \r\n    render() {\r\n        const {errors} = this.state;\r\n        const {postItem} = this.props;\r\n        return (\r\n    \r\n            <div className=\"ReplyForm\">            \r\n               <form className = \"ReplyForm__form\" onSubmit={ (e)=> this.onSubmitHandler(e,postItem._id) }>\r\n                  <div className=\"form__group\">\r\n                    <TextAreaFieldGroup\r\n                      placeholder= { isEmpty(errors.replyErrors) ? 'Add a reply...' : errors.replyErrors.text}\r\n                      name=\"text\"\r\n                      value={this.state.text}\r\n                      onChange={ (e)=> this.onChangeHandler(e)}\r\n                      error={errors.text}\r\n                      className = \"form__textarea form__textarea-grey\"\r\n                      rows = {1}\r\n                    />\r\n                  </div>\r\n                    <button type=\"submit\" className=\"ReplyForm__button\">\r\n                        Submit Reply\r\n                    </button>\r\n                </form>\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\nReplyForm.propTypes = {\r\n     auth: PropTypes.object.isRequired,\r\n     errors: PropTypes.object.isRequired,\r\n     addReply:PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth:state.auth,\r\n    errors: state.errors,\r\n    post: state.post\r\n  });\r\n\r\n\r\nexport default connect(mapStateToProps,{ addReply,getPosts })(ReplyForm);"]},"metadata":{},"sourceType":"module"}