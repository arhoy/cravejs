{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\posts\\\\replies\\\\ReplyEditForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport TextAreaFieldGroup from '../../common/TextAreaFieldGroup';\nimport { addEditPostReply, getReply } from '../../../actions/postActions';\nimport PropTypes from 'prop-types';\n\nvar ReplyEditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReplyEditForm, _Component);\n\n  function ReplyEditForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReplyEditForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReplyEditForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      text: '' // errors:{}\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeHandler\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitHandler\", function (e) {\n      e.preventDefault();\n      var _this$props = _this.props,\n          replyId = _this$props.replyId,\n          postId = _this$props.postId;\n      var user = _this.props.auth.user;\n      var dataToSubmit = {\n        text: _this.state.text,\n        name: user.name,\n        avatar: user.avatar\n      };\n      console.log('I was submited', dataToSubmit, replyId);\n\n      _this.props.addEditPostReply(postId, replyId, dataToSubmit); // it will look for replyId in the backend\n\n\n      _this.setState({\n        text: ''\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ReplyEditForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props);\n      var _this$props2 = this.props,\n          replyId = _this$props2.replyId,\n          postId = _this$props2.postId;\n      this.props.getReply(postId, replyId);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      // if (nextProps.errors) {\n      //   this.setState({ errors: nextProps.errors });\n      // }\n      console.log('These are the next props', nextProps);\n\n      if (nextProps.post.post) {\n        var post = nextProps.post.post[0]; // set component fields state.\n\n        this.setState({\n          text: post.text\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // const {errors} = this.state;\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        className: \"PostEditForm\",\n        style: {\n          zIndex: 1000\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"PostEditForm__form\",\n        onSubmit: function onSubmit(e) {\n          return _this2.onSubmitHandler(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form__group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(TextAreaFieldGroup, {\n        placeholder: \"Edit post\",\n        name: \"text\",\n        value: this.state.text,\n        onChange: function onChange(e) {\n          return _this2.onChangeHandler(e);\n        } //  error={errors.text}\n        ,\n        className: \"form__textarea form__textarea-grey\",\n        rows: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"PostEditForm__button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Save Edits\")));\n    }\n  }]);\n\n  return ReplyEditForm;\n}(Component);\n\nReplyEditForm.propTypes = {\n  auth: PropTypes.object.isRequired,\n  addEditPostReply: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    post: state.post\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addEditPostReply: addEditPostReply,\n  getReply: getReply\n})(withRouter(ReplyEditForm));","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\posts\\replies\\ReplyEditForm.js"],"names":["React","Component","connect","withRouter","TextAreaFieldGroup","addEditPostReply","getReply","PropTypes","ReplyEditForm","text","e","setState","target","name","value","preventDefault","props","replyId","postId","user","auth","dataToSubmit","state","avatar","console","log","nextProps","post","zIndex","onSubmitHandler","onChangeHandler","propTypes","object","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport TextAreaFieldGroup from '../../common/TextAreaFieldGroup';\r\nimport { addEditPostReply,getReply } from '../../../actions/postActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ReplyEditForm extends Component {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n        const {replyId, postId} = this.props;\r\n        this.props.getReply(postId,replyId);\r\n    }\r\n    \r\n    state = {\r\n        text: ''\r\n       // errors:{}\r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps) {\r\n        // if (nextProps.errors) {\r\n        //   this.setState({ errors: nextProps.errors });\r\n        // }\r\n        console.log('These are the next props',nextProps);\r\n        if(nextProps.post.post){\r\n            const post = nextProps.post.post[0];\r\n\r\n            // set component fields state.\r\n            this.setState({\r\n                text: post.text\r\n              });\r\n    \r\n        }\r\n      }\r\n      \r\n    \r\n    onChangeHandler = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        const { replyId, postId } = this.props;\r\n        const { user } = this.props.auth;\r\n        const dataToSubmit = {\r\n            text: this.state.text,\r\n            name: user.name,\r\n            avatar: user.avatar\r\n        }\r\n        console.log('I was submited',dataToSubmit,replyId);\r\n         this.props.addEditPostReply(postId,replyId,dataToSubmit); // it will look for replyId in the backend\r\n        this.setState({text:''});\r\n    \r\n        \r\n    }\r\n    \r\n    \r\n    render() {\r\n       // const {errors} = this.state;\r\n       console.log(this.props);\r\n\r\n        return (\r\n    \r\n            <div className = \"PostEditForm\" style = {{zIndex: 1000}}>\r\n               <form className = \"PostEditForm__form\" onSubmit={ (e)=> this.onSubmitHandler(e) }>\r\n                  <div className=\"form__group\">\r\n                    <TextAreaFieldGroup\r\n                      placeholder=\"Edit post\"\r\n                      name=\"text\"\r\n                      value={this.state.text}\r\n                      onChange={ (e)=> this.onChangeHandler(e)}\r\n                    //  error={errors.text}\r\n                      className = \"form__textarea form__textarea-grey\"\r\n                      rows = {5}\r\n                    />\r\n                  </div>\r\n                    <button type=\"submit\" className=\"PostEditForm__button\">\r\n                        Save Edits\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nReplyEditForm.propTypes = {\r\n     auth: PropTypes.object.isRequired,\r\n     addEditPostReply:PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth:state.auth,\r\n    post: state.post\r\n  });\r\n\r\n\r\nexport default connect(mapStateToProps,{ addEditPostReply,  getReply })(withRouter(ReplyEditForm));"]},"metadata":{},"sourceType":"module"}