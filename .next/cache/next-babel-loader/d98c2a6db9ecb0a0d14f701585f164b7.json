{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER, CLEAR_ERRORS, INITIAL_SIGNUP_SUCCESS } from './types'; // Clear errors\n\nexport var clearErrors = function clearErrors() {\n  return {\n    type: CLEAR_ERRORS\n  };\n}; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    dispatch(clearErrors());\n    axios.post('/api/users/register', userData).then(function (res) {\n      dispatch({\n        type: INITIAL_SIGNUP_SUCCESS,\n        payload: true\n      });\n      setTimeout(function () {\n        // after 2 seconds\n        window.location = \"/login\";\n      }, 2000);\n    })[\"catch\"](function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - Get User Token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    dispatch(clearErrors());\n    axios.post('/api/users/login', userData).then(function (res) {\n      // Save to localStorage\n      var token = res.data.token; // Set token to ls\n\n      localStorage.setItem('jwtToken', token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    })[\"catch\"](function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\actions\\authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","CLEAR_ERRORS","INITIAL_SIGNUP_SUCCESS","clearErrors","type","registerUser","userData","history","dispatch","post","then","res","payload","setTimeout","window","location","err","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,EAAoDC,sBAApD,QAAkF,SAAlF,C,CAEA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DA,IAAAA,QAAQ,CAACL,WAAW,EAAZ,CAAR;AACAP,IAAAA,KAAK,CACFa,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACXH,MAAAA,QAAQ,CAAE;AACRJ,QAAAA,IAAI,EAAEF,sBADE;AAERU,QAAAA,OAAO,EAAC;AAFA,OAAF,CAAR;AAIEC,MAAAA,UAAU,CAAC,YAAY;AACrB;AACAC,QAAAA,MAAM,CAACC,QAAP,GAAkB,QAAlB;AACH,OAHW,EAGT,IAHS,CAAV;AAIH,KAXH,WAYS,UAAAC,GAAG;AAAA,aACRR,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAEL,UADC;AAEPa,QAAAA,OAAO,EAAEI,GAAG,CAACC,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAZZ;AAkBD,GApB2B;AAAA,CAArB,C,CAsBP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAb,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC/CA,IAAAA,QAAQ,CAACL,WAAW,EAAZ,CAAR;AACAP,IAAAA,KAAK,CACFa,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AADW,UAEHS,KAFG,GAEOT,GAAG,CAACO,IAFX,CAEHE,KAFG,EAGX;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACAvB,MAAAA,YAAY,CAACuB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAGzB,UAAU,CAACsB,KAAD,CAA1B,CARW,CASX;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KAbH,WAcS,UAAAP,GAAG;AAAA,aACRR,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAEL,UADC;AAEPa,QAAAA,OAAO,EAAEI,GAAG,CAACC,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAdZ;AAoBD,GAtBgC;AAAA,CAA1B,C,CAwBP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLnB,IAAAA,IAAI,EAAEJ,gBADD;AAELY,IAAAA,OAAO,EAAEW;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAjB,QAAQ,EAAI;AAC1C;AACAa,IAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA7B,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAW,IAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, CLEAR_ERRORS,INITIAL_SIGNUP_SUCCESS } from './types';\r\n\r\n// Clear errors\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: CLEAR_ERRORS\r\n  }\r\n}\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  dispatch(clearErrors());\r\n  axios\r\n    .post('/api/users/register', userData)\r\n    .then(res => {\r\n      dispatch ({\r\n        type: INITIAL_SIGNUP_SUCCESS,\r\n        payload:true\r\n      })\r\n        setTimeout(function () {\r\n          // after 2 seconds\r\n          window.location = \"/login\";\r\n      }, 2000)\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Login - Get User Token\r\nexport const loginUser = userData => dispatch => {\r\n  dispatch(clearErrors());\r\n  axios\r\n    .post('/api/users/login', userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n      const { token } = res.data;\r\n      // Set token to ls\r\n      localStorage.setItem('jwtToken', token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from localStorage\r\n  localStorage.removeItem('jwtToken');\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}