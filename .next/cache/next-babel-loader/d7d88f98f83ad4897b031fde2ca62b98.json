{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\cart\\\\Cart.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getUserCart, getCurrentCartTotal, clearUserCart } from '../../actions/cartActions';\nimport { submitOrder } from '../../actions/orderActions';\nimport CartItems from './CartItems';\nimport PayPal from '../utils/PayPal';\nimport LoadingSpinner from '../utils/LoadingSpinner';\nimport isEmpty from '../../validation/is-empty';\n\nvar Cart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Cart, _Component);\n\n  function Cart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Cart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Cart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      cart: [],\n      cartTotal: null,\n      cartQuantity: null,\n      loading: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transactionSuccessHandler\", function (data) {\n      // on success call the orders backend api, store order via mongoose.\n      _this.props.submitOrder(data); // clear the user cart...\n\n\n      _this.props.clearUserCart(); // push to thank you page\n\n\n      _this.props.history.push('thank-you');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transactionCanceledHandler\", function () {\n      console.log('user canceled transaction');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transactionErrorHandler\", function () {\n      console.log('Paypal error');\n    });\n\n    return _this;\n  }\n\n  _createClass(Cart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getUserCart();\n      this.props.getCurrentCartTotal();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var cart = this.props.cart;\n      var cartTotal = this.props.cart.cartTotal;\n\n      if (prevProps.cart !== this.props.cart && this.props.cart.cart.length >= 0) {\n        this.setState({\n          cart: cart.cart,\n          loading: cart.loading,\n          cartTotal: cartTotal.cartTotal,\n          cartQuantity: cartTotal.cartQuantity\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          cart = _this$state.cart,\n          loading = _this$state.loading,\n          cartTotal = _this$state.cartTotal,\n          cartQuantity = _this$state.cartQuantity;\n\n      if (loading || isEmpty(cartTotal)) {\n        return React.createElement(\"div\", {\n          className: \"Cart\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Cart__loading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"Cart is loading\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, \"Please refresh page if loading persists\"), React.createElement(LoadingSpinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        })));\n      }\n\n      if (cart.length === 0 && !loading) {\n        return React.createElement(\"div\", {\n          className: \"Cart\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Cart__empty\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Cart__empty-block Cart__empty-block--1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \"Your Cart is Empty!\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(Link, {\n          className: \"navigation__link\",\n          to: \"/products\",\n          style: {\n            textDecoration: 'underline'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, \"Search for Products\"))), React.createElement(\"div\", {\n          className: \"Cart__empty-block Cart__empty-block--2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, \"Your Order History\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(Link, {\n          className: \"navigation__link\",\n          to: \"/orders\",\n          style: {\n            textDecoration: 'underline'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, \"View Order History\")))));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"Cart\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Cart__header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, \"Shopping Cart\"), cart.length > 0 ? React.createElement(\"div\", {\n          className: \"Cart__body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Cart__body-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \"Items in your cart \", cartQuantity), React.createElement(\"div\", {\n          className: \"Cart__body-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(CartItems, {\n          cart: cart,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"Cart__body-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Cart__total\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"Total Amount:\", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, \" $\".concat(this.state.cartTotal.toFixed(2)))), React.createElement(\"button\", {\n          className: \"Cart__paypal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(PayPal, {\n          toPay: cartTotal,\n          transactionError: this.transactionErrorHandler,\n          transactionCanceled: this.transactionCanceledHandler,\n          transactionSuccess: this.transactionSuccessHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        })))) : null);\n      }\n    }\n  }]);\n\n  return Cart;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    cart: state.cart\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getUserCart: getUserCart,\n  getCurrentCartTotal: getCurrentCartTotal,\n  submitOrder: submitOrder,\n  clearUserCart: clearUserCart\n})(withRouter(Cart));","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\cart\\Cart.js"],"names":["React","Component","Link","withRouter","connect","getUserCart","getCurrentCartTotal","clearUserCart","submitOrder","CartItems","PayPal","LoadingSpinner","isEmpty","Cart","cart","cartTotal","cartQuantity","loading","data","props","history","push","console","log","prevProps","prevState","length","setState","state","textDecoration","toFixed","transactionErrorHandler","transactionCanceledHandler","transactionSuccessHandler","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getUserCart,\r\n  getCurrentCartTotal,\r\n  clearUserCart\r\n} from '../../actions/cartActions';\r\nimport { submitOrder } from '../../actions/orderActions';\r\nimport CartItems from './CartItems';\r\nimport PayPal from '../utils/PayPal';\r\nimport LoadingSpinner from '../utils/LoadingSpinner';\r\nimport isEmpty from '../../validation/is-empty';\r\n\r\nclass Cart extends Component {\r\n  state = {\r\n    cart: [],\r\n    cartTotal: null,\r\n    cartQuantity: null,\r\n    loading: true\r\n  };\r\n  componentDidMount() {\r\n    this.props.getUserCart();\r\n    this.props.getCurrentCartTotal();\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { cart } = this.props;\r\n    const { cartTotal } = this.props.cart;\r\n    if (\r\n      prevProps.cart !== this.props.cart &&\r\n      this.props.cart.cart.length >= 0\r\n    ) {\r\n      this.setState({\r\n        cart: cart.cart,\r\n        loading: cart.loading,\r\n        cartTotal: cartTotal.cartTotal,\r\n        cartQuantity: cartTotal.cartQuantity\r\n      });\r\n    }\r\n  }\r\n  transactionSuccessHandler = data => {\r\n    // on success call the orders backend api, store order via mongoose.\r\n    this.props.submitOrder(data);\r\n\r\n    // clear the user cart...\r\n    this.props.clearUserCart();\r\n\r\n    // push to thank you page\r\n    this.props.history.push('thank-you');\r\n  };\r\n  transactionCanceledHandler = () => {\r\n    console.log('user canceled transaction');\r\n  };\r\n  transactionErrorHandler = () => {\r\n    console.log('Paypal error');\r\n  };\r\n\r\n  render() {\r\n    const { cart, loading, cartTotal, cartQuantity } = this.state;\r\n    if (loading || isEmpty(cartTotal)) {\r\n      return (\r\n        <div className=\"Cart\">\r\n          <div className=\"Cart__loading\">\r\n            <div>Cart is loading</div>\r\n            <div>Please refresh page if loading persists</div>\r\n            <LoadingSpinner />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (cart.length === 0 && !loading) {\r\n      return (\r\n        <div className=\"Cart\">\r\n          <div className=\"Cart__empty\">\r\n            <div className=\"Cart__empty-block Cart__empty-block--1\">\r\n              <div>Your Cart is Empty!</div>\r\n              <div>\r\n                <Link\r\n                  className=\"navigation__link\"\r\n                  to=\"/products\"\r\n                  style={{ textDecoration: 'underline' }}\r\n                >\r\n                  Search for Products\r\n                </Link>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"Cart__empty-block Cart__empty-block--2\">\r\n              <div>Your Order History</div>\r\n              <div>\r\n                <Link\r\n                  className=\"navigation__link\"\r\n                  to=\"/orders\"\r\n                  style={{ textDecoration: 'underline' }}\r\n                >\r\n                  View Order History\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"Cart\">\r\n          <div className=\"Cart__header\">Shopping Cart</div>\r\n\r\n          {cart.length > 0 ? (\r\n            <div className=\"Cart__body\">\r\n              <div className=\"Cart__body-1\">\r\n                Items in your cart {cartQuantity}\r\n              </div>\r\n              <div className=\"Cart__body-2\">\r\n                <CartItems cart={cart} />\r\n              </div>\r\n\r\n              <div className=\"Cart__body-3\">\r\n                <div className=\"Cart__total\">\r\n                  Total Amount:\r\n                  <span>{` $${this.state.cartTotal.toFixed(2)}`}</span>\r\n                </div>\r\n                <button className=\"Cart__paypal\">\r\n                  <PayPal\r\n                    toPay={cartTotal}\r\n                    transactionError={this.transactionErrorHandler}\r\n                    transactionCanceled={this.transactionCanceledHandler}\r\n                    transactionSuccess={this.transactionSuccessHandler}\r\n                  />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  cart: state.cart\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getUserCart, getCurrentCartTotal, submitOrder, clearUserCart }\r\n)(withRouter(Cart));\r\n"]},"metadata":{},"sourceType":"module"}