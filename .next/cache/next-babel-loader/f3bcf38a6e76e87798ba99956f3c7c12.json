{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\utils\\\\form\\\\ResumeFileUpload.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nimport { addResume } from '../../../actions/resumeActions';\nvar maxFileSize = 1000000; // max size in bytes. ~ 10 megabyte.\n\nvar ResumeFileUpload =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResumeFileUpload, _Component);\n\n  function ResumeFileUpload() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResumeFileUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResumeFileUpload)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      uploadedFiles: [],\n      uploading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnDrop\", function (files, rejectedFiles) {\n      if (files && files.length > 0) {\n        var formData = new FormData();\n        formData.append(\"file\", files[0]); // save and upload this to cloudinary\n\n        axios.post('/api/users/uploadimage', formData).then(function (response) {\n          _this.setState({\n            uploading: false,\n            uploadedFiles: [].concat(_toConsumableArray(_this.state.uploadedFiles), [response.data])\n          });\n        })[\"catch\"](function (err) {\n          return console.log('there was an error with upload to cloudinary');\n        });\n      }\n\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        if (rejectedFiles[0].size > maxFileSize) {\n          alert('File is to big!');\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(ResumeFileUpload, [{\n    key: \"render\",\n    value: function render() {\n      var uploadedFiles = this.state.uploadedFiles;\n      return React.createElement(\"div\", {\n        className: \"fileupload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"fileupload__drag\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Dropzone, {\n        onDrop: this.handleOnDrop,\n        maxSize: maxFileSize,\n        className: \"fileupload__dropzone\",\n        multiple: this.props.multiple,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        icon: \"plus-circle\",\n        style: {\n          color: 'black',\n          cursor: 'pointer',\n          fontSize: '4.5rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \" drag and drop file \"))), uploadedFiles.length > 0 ? React.createElement(\"div\", {\n        className: \"fileupload__show\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"fileupload__imagesContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, uploadedFiles.map(function (file) {\n        return React.createElement(\"div\", {\n          className: \"fileupload__images\",\n          key: file.public_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: file.url,\n          alt: \"Uploaded File\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }));\n      }))) : null);\n    }\n  }]);\n\n  return ResumeFileUpload;\n}(Component);\n\nResumeFileUpload.defaultProps = {\n  multiple: false\n};\nexport default connect(null, {\n  addResume: addResume\n})(ResumeFileUpload);","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\utils\\form\\ResumeFileUpload.js"],"names":["React","Component","connect","FontAwesomeIcon","Dropzone","axios","addResume","maxFileSize","ResumeFileUpload","uploadedFiles","uploading","files","rejectedFiles","length","formData","FormData","append","post","then","response","setState","state","data","err","console","log","size","alert","handleOnDrop","props","multiple","color","cursor","fontSize","map","file","public_id","url","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Dropzone from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport { addResume } from '../../../actions/resumeActions';\r\n\r\nconst maxFileSize = 1000000; // max size in bytes. ~ 10 megabyte.\r\nclass ResumeFileUpload extends Component {\r\n\r\n    state = {\r\n        uploadedFiles:[],\r\n        uploading:false\r\n    }\r\n\r\n    handleOnDrop = ( files,rejectedFiles ) => {\r\n        if(files && files.length > 0) {\r\n            let formData = new FormData();\r\n            formData.append(\"file\",files[0]);\r\n\r\n            // save and upload this to cloudinary\r\n            axios.post('/api/users/uploadimage',formData)\r\n                .then( response => {\r\n                    this.setState({\r\n                        uploading:false,\r\n                        uploadedFiles:[\r\n                            ...this.state.uploadedFiles,\r\n                            response.data\r\n                        ]\r\n                    })\r\n                })\r\n                .catch ( err => console.log('there was an error with upload to cloudinary'))\r\n\r\n        }\r\n        if(rejectedFiles && rejectedFiles.length > 0){\r\n            if(rejectedFiles[0].size > maxFileSize){\r\n                alert('File is to big!');\r\n            }\r\n        }\r\n       \r\n    }\r\n\r\n\r\n    render() {\r\n        const { uploadedFiles } = this.state;\r\n        return (\r\n            <div className = \"fileupload\" >\r\n                        \r\n                     \r\n                    <div className=\"fileupload__drag\">\r\n                            <Dropzone\r\n                                onDrop = { this.handleOnDrop }\r\n                                maxSize = {maxFileSize}\r\n                                className = \"fileupload__dropzone\"\r\n                                multiple = {this.props.multiple}\r\n                            >\r\n                                <FontAwesomeIcon\r\n                                        icon=\"plus-circle\"\r\n                                        style = {{color:'black', cursor:'pointer',fontSize: '4.5rem'}}\r\n                                />\r\n                                <p> drag and drop file </p>\r\n                             \r\n                            </Dropzone>\r\n\r\n                           \r\n                    </div>\r\n                    {/* this mapping is from the currently uploaded files */}\r\n\r\n                    {\r\n                        uploadedFiles.length > 0  ? \r\n                        <div className = \"fileupload__show\">\r\n                            {\r\n                                    \r\n                                            <div className = \"fileupload__imagesContainer\">\r\n                                            {\r\n                                                uploadedFiles.map( file => (\r\n                                                    <div className = \"fileupload__images\"\r\n                                                        key = {file.public_id}\r\n                                                    >\r\n                                                        <img src={file.url} alt=\"Uploaded File\"/>\r\n                                                    </div>\r\n                                                ))\r\n                                            }\r\n                                            </div>\r\n                        \r\n                            }\r\n                       </div> \r\n                       : null\r\n                    }\r\n                   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nResumeFileUpload.defaultProps = {\r\n    multiple: false\r\n  };\r\n\r\n\r\nexport default connect(null,{addResume})(ResumeFileUpload);\r\n\r\n"]},"metadata":{},"sourceType":"module"}