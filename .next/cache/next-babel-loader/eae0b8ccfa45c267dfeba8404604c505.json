{"ast":null,"code":"import axios from 'axios';\nimport { GET_POST, GET_POSTS, POST_LOADING, DELETE_POST, ADD_POST, GET_ERRORS, GET_POST_ERRORS, GET_REPLY_ERRORS, CLEAR_ERRORS, LIKE_POST, GET_REPLY, GET_REPLIES } from '../actions/types';\nexport const addPost = postData => dispatch => {\n  dispatch(clearErrors());\n  axios.post(`/api/posts`, postData).then(res => dispatch({\n    type: ADD_POST,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_POST_ERRORS,\n    payload: err.response.data\n  }));\n  dispatch(getPosts());\n};\nexport const addEditPost = (id, postData) => dispatch => {\n  dispatch(clearErrors());\n  axios.post(`/api/posts/${id}`, postData).then(res => dispatch({\n    type: GET_POST,\n    payload: res.data\n  })).then(res => dispatch(getPosts())).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // ADD REPLY FOR SPECIFIC POST\n// add reply\n\nexport const addReply = (postId, replyData) => dispatch => {\n  dispatch(clearErrors());\n  axios.post(`/api/posts/reply/${postId}`, replyData).then(res => {\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  }).then(res => dispatch(getPosts())).catch(err => dispatch({\n    type: GET_REPLY_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const getPosts = () => dispatch => {\n  dispatch(setPostLoading());\n  axios.get('/api/posts').then(res => // console.log(res.data)\n  dispatch({\n    type: GET_POSTS,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_POSTS,\n    payload: null\n  }));\n};\nexport const getPost = id => dispatch => {\n  axios.get(`/api/posts/${id}`).then(res => // console.log(res.data)\n  dispatch({\n    type: GET_POST,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_POST,\n    payload: null\n  }));\n}; // populate the replies.\n\nexport const getReply = (postId, replyId) => dispatch => {\n  axios.post(`/api/posts/${postId}/${replyId}`).then(res => dispatch({\n    type: GET_REPLY,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_REPLY,\n    payload: null\n  }));\n}; // add edit post reply\n\nexport const addEditPostReply = (postId, replyId, postData) => dispatch => {\n  axios.post(`/api/posts/reply/${postId}/${replyId}`, postData).then(res => dispatch({\n    type: GET_REPLY,\n    payload: res.data\n  })).then(res => dispatch(getPosts())).catch(err => dispatch({\n    type: GET_REPLY,\n    payload: err.response.data\n  }));\n};\nexport const deletePost = id => dispatch => {\n  axios.delete(`/api/posts/${id}`).then(res => {\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //Add Like\n\nexport const addLike = id => dispatch => {\n  axios.post(`/api/posts/like/${id}`).then(({\n    data\n  }) => {\n    dispatch({\n      type: LIKE_POST,\n      payload: data //pass in updated post\n\n    });\n  }).catch(({\n    response\n  }) => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: response.data\n    });\n  });\n}; // Add Reply Like\n\nexport const addReplyLike = (postId, replyId) => dispatch => {\n  axios.post(`/api/posts/reply/like/${postId}/${replyId}`).then(({\n    data\n  }) => dispatch({\n    type: LIKE_POST,\n    payload: data\n  })).then(res => dispatch(getPosts())).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //Remove Like\n\nexport const removeLike = id => dispatch => {\n  axios.post(`/api/posts/unlike/${id}`).then(({\n    data\n  }) => {\n    dispatch({\n      type: LIKE_POST,\n      payload: data //pass in updated post\n\n    });\n  }).catch(({\n    response\n  }) => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: response.data\n    });\n  });\n}; //Remove Reply Like\n\nexport const removeReplyLike = (postId, replyId) => dispatch => {\n  axios.post(`/api/posts/reply/unlike/${postId}/${replyId}`).then(({\n    data\n  }) => {\n    dispatch({\n      type: LIKE_POST,\n      payload: data //pass in updated post\n\n    });\n  }).catch(({\n    response\n  }) => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: response.data\n    });\n  });\n}; // Set loading state\n\nexport const setPostLoading = () => {\n  return {\n    type: POST_LOADING\n  };\n}; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n}; // GET all replies for a specific post id\n// payload is an array or reply objects.\n\nexport const getReplies = id => dispatch => {\n  dispatch(setPostLoading());\n  axios.get(`/api/posts/reply/${id}`).then(res => dispatch({\n    type: GET_REPLIES,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_REPLIES,\n    payload: null\n  }));\n  console.log('ran get replies');\n}; // delete reply\n\nexport const deleteReply = (postId, replyId) => dispatch => {\n  dispatch(clearErrors());\n  axios.delete(`/api/posts/reply/${postId}/${replyId}`).then(({\n    data\n  }) => // console.log(res.data)\n  dispatch({\n    type: GET_POST,\n    payload: data\n  })).then(res => dispatch(getPosts())).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\actions\\postActions.js"],"names":["axios","GET_POST","GET_POSTS","POST_LOADING","DELETE_POST","ADD_POST","GET_ERRORS","GET_POST_ERRORS","GET_REPLY_ERRORS","CLEAR_ERRORS","LIKE_POST","GET_REPLY","GET_REPLIES","addPost","postData","dispatch","clearErrors","post","then","res","type","payload","data","catch","err","response","getPosts","addEditPost","id","addReply","postId","replyData","setPostLoading","get","getPost","getReply","replyId","addEditPostReply","deletePost","delete","addLike","addReplyLike","removeLike","removeReplyLike","getReplies","console","log","deleteReply"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nimport {\r\n    GET_POST,\r\n    GET_POSTS,\r\n    POST_LOADING,\r\n    DELETE_POST,\r\n    ADD_POST,\r\n    GET_ERRORS,\r\n    GET_POST_ERRORS,\r\n    GET_REPLY_ERRORS,\r\n    CLEAR_ERRORS,\r\n    LIKE_POST,\r\n    GET_REPLY,\r\n    GET_REPLIES\r\n  } from '../actions/types';\r\n\r\n\r\nexport const addPost = (postData) => dispatch => {\r\n    dispatch(clearErrors());\r\n    axios\r\n    .post(`/api/posts`,postData)\r\n    .then( res =>\r\n        dispatch({\r\n            type: ADD_POST,\r\n            payload:res.data\r\n        })\r\n    )\r\n    .catch( err =>\r\n        dispatch({\r\n            type:GET_POST_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    );\r\n    dispatch(getPosts());\r\n\r\n}\r\n\r\nexport const addEditPost = (id,postData) => dispatch => {\r\n    dispatch(clearErrors());\r\n    axios\r\n        .post(`/api/posts/${id}`,postData)\r\n        .then( res => \r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .then( \r\n            res => dispatch(getPosts())\r\n        )\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ADD REPLY FOR SPECIFIC POST\r\n// add reply\r\nexport const addReply = (postId, replyData) => dispatch => {\r\n    dispatch(clearErrors());\r\n    \r\n    axios\r\n        .post(`/api/posts/reply/${postId}`,replyData)\r\n        .then( res => {\r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .then( \r\n            res => dispatch(getPosts())\r\n        )\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_REPLY_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n}\r\n\r\nexport const getPosts = () => dispatch => {\r\n    dispatch(setPostLoading());\r\n    axios\r\n        .get('/api/posts')\r\n        .then( res =>\r\n            // console.log(res.data)\r\n            dispatch({\r\n                type: GET_POSTS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_POSTS,\r\n                payload: null\r\n            })\r\n        );\r\n  \r\n}\r\n\r\n\r\nexport const getPost = id => dispatch => {\r\n \r\n    axios\r\n        .get(`/api/posts/${id}`)\r\n        .then( res =>\r\n            // console.log(res.data)\r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_POST,\r\n                payload: null\r\n            })\r\n        );\r\n\r\n}\r\n\r\n// populate the replies.\r\nexport const getReply = (postId,replyId) => dispatch => {\r\n    axios\r\n        .post(`/api/posts/${postId}/${replyId}`)\r\n        .then( res =>\r\n            dispatch({\r\n                type: GET_REPLY,\r\n                payload:res.data\r\n            })\r\n    \r\n        )\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_REPLY,\r\n                payload: null\r\n            })\r\n        );\r\n}\r\n\r\n\r\n// add edit post reply\r\nexport const addEditPostReply = (postId,replyId,postData) => dispatch => {\r\n    axios\r\n        .post(`/api/posts/reply/${postId}/${replyId}`,postData)\r\n    \r\n        .then(  res => \r\n            dispatch({\r\n                type: GET_REPLY,\r\n                payload:res.data\r\n            })\r\n        )\r\n        .then( \r\n            res => dispatch(getPosts())\r\n        )\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_REPLY,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n}\r\n\r\n\r\n\r\nexport const deletePost = id => dispatch => {\r\n    axios\r\n      .delete(`/api/posts/${id}`)\r\n      .then( res => {\r\n        dispatch({\r\n          type:DELETE_POST,\r\n          payload:id\r\n        })\r\n      })\r\n      .catch( err => {\r\n         dispatch({\r\n           type: GET_ERRORS,\r\n           payload: err.response.data\r\n         })\r\n      })\r\n}\r\n\r\n\r\n\r\n//Add Like\r\nexport const addLike = id => dispatch => {\r\n  axios\r\n    .post(`/api/posts/like/${id}`)\r\n    .then(({ data }) => {\r\n      dispatch({\r\n        type: LIKE_POST,\r\n        payload: data //pass in updated post\r\n      });\r\n    })\r\n    .catch(({ response }) => {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: response.data\r\n      });\r\n    });\r\n};\r\n\r\n// Add Reply Like\r\nexport const addReplyLike = (postId, replyId)  => dispatch => {\r\n    axios\r\n        .post(`/api/posts/reply/like/${postId}/${replyId}`)\r\n        .then( ({data}) =>\r\n            dispatch({\r\n                type: LIKE_POST,\r\n                payload: data\r\n            })\r\n        )\r\n        .then ( res => dispatch(getPosts()))\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n}\r\n\r\n \r\n//Remove Like\r\nexport const removeLike = id => dispatch => {\r\n  axios\r\n    .post(`/api/posts/unlike/${id}`)\r\n    .then(({ data }) => {\r\n      dispatch({\r\n        type: LIKE_POST,\r\n        payload: data //pass in updated post\r\n      });\r\n    })\r\n    .catch(({ response }) => {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: response.data\r\n      });\r\n    });\r\n};\r\n\r\n//Remove Reply Like\r\nexport const removeReplyLike = (postId,replyId) => dispatch => {\r\n    axios\r\n      .post(`/api/posts/reply/unlike/${postId}/${replyId}`)\r\n      .then(({ data }) => {\r\n        dispatch({\r\n          type: LIKE_POST,\r\n          payload: data //pass in updated post\r\n        });\r\n      })\r\n      .catch(({ response }) => {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: response.data\r\n        });\r\n      });\r\n  };\r\n  \r\n\r\n\r\n// Set loading state\r\nexport const setPostLoading = () => {\r\n    return {\r\n      type: POST_LOADING\r\n    };\r\n  };\r\n  \r\n  // Clear errors\r\nexport const clearErrors = () => {\r\n    return {\r\n      type: CLEAR_ERRORS\r\n    };\r\n  };\r\n\r\n\r\n\r\n// GET all replies for a specific post id\r\n// payload is an array or reply objects.\r\nexport const getReplies = id => dispatch => {\r\n    dispatch(setPostLoading());\r\n    axios\r\n        .get(`/api/posts/reply/${id}`)\r\n        .then( res =>\r\n            dispatch({\r\n                type: GET_REPLIES,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_REPLIES,\r\n                payload: null\r\n            })\r\n        );\r\n    console.log('ran get replies');\r\n}\r\n  \r\n\r\n\r\n// delete reply\r\nexport const deleteReply = (postId, replyId)  => dispatch => {\r\n    dispatch(clearErrors());\r\n    axios\r\n        .delete(`/api/posts/reply/${postId}/${replyId}`)\r\n        .then( ({data}) =>\r\n            // console.log(res.data)\r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: data\r\n            })\r\n        )\r\n        .then ( res => dispatch(getPosts()))\r\n        .catch( err =>\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}