{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\profiles\\\\ProfileCommentsForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextAreaFieldGroup from '../common/TextAreaFieldGroup';\nimport { withRouter } from 'react-router-dom';\nimport { addComment } from '../../actions/profileActions';\nimport PropTypes from 'prop-types';\nimport isEmpty from '../../validation/is-empty';\nconst maxPostLength = 2000;\n\nclass ProfileCommentsForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      text: '',\n      errors: {}\n    });\n\n    _defineProperty(this, \"onChangeHandler\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSubmitHandler\", e => {\n      e.preventDefault();\n      const {\n        handle\n      } = this.props.match.params;\n      const {\n        user\n      } = this.props.auth;\n      const newPost = {\n        text: this.state.text,\n        name: user.name,\n        avatar: user.avatar // validation \n\n      };\n\n      if (newPost.text.length < maxPostLength && handle !== '') {\n        this.props.addComment(handle, newPost);\n        this.setState({\n          text: ''\n        });\n      }\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.errors !== prevState.errors) {\n      return {\n        errors: nextProps.errors\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      isAuthenticated\n    } = this.props.auth;\n    const {\n      backgroundColor,\n      placeholder,\n      color\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"PostForm\",\n      style: {\n        backgroundColor,\n        color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"PostForm__form\",\n      onSubmit: e => this.onSubmitHandler(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"PostForm__textarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(TextAreaFieldGroup, {\n      placeholder: isEmpty(errors.postErrors) ? placeholder : errors.postErrors.text,\n      name: \"text\",\n      value: this.state.text,\n      onChange: e => this.onChangeHandler(e) //  error={errors.text}\n      ,\n      className: \"form__textarea form__textarea-grey\",\n      rows: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"PostForm__message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.state.text.length > maxPostLength ? React.createElement(\"div\", {\n      className: \"PostForm__postLimitExceeded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, isAuthenticated ? `Post must be under ${maxPostLength} characters!` : 'Must be logged in to post') : null, this.state.text.length <= maxPostLength ? React.createElement(\"div\", {\n      className: \"PostForm__postCharacterCount\",\n      style: {\n        color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, isAuthenticated ? `${maxPostLength - this.state.text.length} characters remaining!` : 'Must be logged in to post') : null), React.createElement(\"button\", {\n      disabled: !isAuthenticated,\n      type: \"submit\",\n      className: \"PostForm__button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nProfileCommentsForm.propTypes = {\n  auth: PropTypes.object.isRequired,\n  //   errors: PropTypes.object.isRequired,\n  addComment: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  addComment\n})(withRouter(ProfileCommentsForm));","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\profiles\\ProfileCommentsForm.js"],"names":["React","Component","connect","TextAreaFieldGroup","withRouter","addComment","PropTypes","isEmpty","maxPostLength","ProfileCommentsForm","text","errors","e","setState","target","name","value","preventDefault","handle","props","match","params","user","auth","newPost","state","avatar","length","getDerivedStateFromProps","nextProps","prevState","render","isAuthenticated","backgroundColor","placeholder","color","onSubmitHandler","postErrors","onChangeHandler","propTypes","object","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TextAreaFieldGroup from '../common/TextAreaFieldGroup';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { addComment } from '../../actions/profileActions';\r\nimport PropTypes from 'prop-types';\r\nimport isEmpty from '../../validation/is-empty';\r\n\r\nconst maxPostLength = 2000;\r\nclass ProfileCommentsForm extends Component {\r\n    state = {\r\n        text: '',\r\n       errors:{}\r\n    }\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if(nextProps.errors !== prevState.errors) {\r\n            return {errors: nextProps.errors}\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    onChangeHandler = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        const {handle} = this.props.match.params;\r\n        const { user } = this.props.auth;\r\n        const newPost = {\r\n            text: this.state.text,\r\n            name: user.name,\r\n            avatar: user.avatar\r\n        }\r\n    \r\n         // validation \r\n         if(newPost.text.length < maxPostLength && handle !== ''){\r\n            this.props.addComment(handle,newPost);\r\n            this.setState({text:''});\r\n         }\r\n     \r\n    }\r\n    \r\n    \r\n    render() {\r\n       const {errors} = this.state;\r\n       const { isAuthenticated } = this.props.auth;\r\n       const { backgroundColor,placeholder, color } = this.props;\r\n\r\n        return (\r\n    \r\n            <div className = \"PostForm\" style = {{backgroundColor, color}} >\r\n               <form className = \"PostForm__form\" onSubmit={ (e)=> this.onSubmitHandler(e) }>\r\n                    <div className = \"PostForm__textarea\">\r\n                        <TextAreaFieldGroup\r\n                        placeholder= { isEmpty(errors.postErrors) ? placeholder : errors.postErrors.text}\r\n                        name=\"text\"\r\n                        value={this.state.text}\r\n                        onChange={ (e)=> this.onChangeHandler(e)}\r\n                        //  error={errors.text}\r\n                        className = \"form__textarea form__textarea-grey\"\r\n                        rows = {5}\r\n                        />\r\n                    </div>\r\n                 \r\n                    <div className = \"PostForm__message\">\r\n                            {\r\n                            this.state.text.length > maxPostLength ?\r\n                                <div className = \"PostForm__postLimitExceeded\">\r\n                                   {isAuthenticated ? `Post must be under ${maxPostLength} characters!` : 'Must be logged in to post'} \r\n                                </div> \r\n                            : null\r\n                        }\r\n\r\n                        {\r\n                                this.state.text.length <= maxPostLength ?\r\n                                <div className = \"PostForm__postCharacterCount\" style = {{color}}>\r\n                                   { isAuthenticated ? `${maxPostLength - this.state.text.length} characters remaining!` : 'Must be logged in to post'  } \r\n                                </div> \r\n                            : null\r\n                        }\r\n                    </div>\r\n                 \r\n                    <button disabled = {!isAuthenticated} type=\"submit\" className=\"PostForm__button\">\r\n                        Submit\r\n                    </button>\r\n                 \r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nProfileCommentsForm.propTypes = {\r\n     auth: PropTypes.object.isRequired,\r\n //   errors: PropTypes.object.isRequired,\r\n    addComment:PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth:state.auth,\r\n    errors: state.errors\r\n  });\r\n\r\n\r\nexport default connect(mapStateToProps,{ addComment })(withRouter(ProfileCommentsForm));"]},"metadata":{},"sourceType":"module"}