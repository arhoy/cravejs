{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER, CLEAR_ERRORS, INITIAL_SIGNUP_SUCCESS } from './types'; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n}; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  dispatch(clearErrors());\n  axios.post('/api/users/register', userData).then(res => {\n    dispatch({\n      type: INITIAL_SIGNUP_SUCCESS,\n      payload: true\n    });\n    setTimeout(function () {\n      // after 2 seconds\n      window.location = \"/login\";\n    }, 2000);\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - Get User Token\n\nexport const loginUser = userData => dispatch => {\n  dispatch(clearErrors());\n  axios.post('/api/users/login', userData).then(res => {\n    // Save to localStorage\n    const {\n      token\n    } = res.data; // Set token to ls\n\n    localStorage.setItem('jwtToken', token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\actions\\authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","CLEAR_ERRORS","INITIAL_SIGNUP_SUCCESS","clearErrors","type","registerUser","userData","history","dispatch","post","then","res","payload","setTimeout","window","location","catch","err","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,EAAoDC,sBAApD,QAAkF,SAAlF,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMI,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DA,EAAAA,QAAQ,CAACL,WAAW,EAAZ,CAAR;AACAP,EAAAA,KAAK,CACFa,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXH,IAAAA,QAAQ,CAAE;AACRJ,MAAAA,IAAI,EAAEF,sBADE;AAERU,MAAAA,OAAO,EAAC;AAFA,KAAF,CAAR;AAIEC,IAAAA,UAAU,CAAC,YAAY;AACrB;AACAC,MAAAA,MAAM,CAACC,QAAP,GAAkB,QAAlB;AACH,KAHW,EAGT,IAHS,CAAV;AAIH,GAXH,EAYGC,KAZH,CAYSC,GAAG,IACRT,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEL,UADC;AAEPa,IAAAA,OAAO,EAAEK,GAAG,CAACC,QAAJ,CAAaC;AAFf,GAAD,CAbZ;AAkBD,CApBM,C,CAsBP;;AACA,OAAO,MAAMC,SAAS,GAAGd,QAAQ,IAAIE,QAAQ,IAAI;AAC/CA,EAAAA,QAAQ,CAACL,WAAW,EAAZ,CAAR;AACAP,EAAAA,KAAK,CACFa,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAYV,GAAG,CAACQ,IAAtB,CAFW,CAGX;;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACAxB,IAAAA,YAAY,CAACwB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAG1B,UAAU,CAACuB,KAAD,CAA1B,CARW,CASX;;AACAb,IAAAA,QAAQ,CAACiB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGR,KAdH,CAcSC,GAAG,IACRT,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEL,UADC;AAEPa,IAAAA,OAAO,EAAEK,GAAG,CAACC,QAAJ,CAAaC;AAFf,GAAD,CAfZ;AAoBD,CAtBM,C,CAwBP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLpB,IAAAA,IAAI,EAAEJ,gBADD;AAELY,IAAAA,OAAO,EAAEY;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,UAAU,GAAG,MAAMlB,QAAQ,IAAI;AAC1C;AACAc,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA9B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAW,EAAAA,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, CLEAR_ERRORS,INITIAL_SIGNUP_SUCCESS } from './types';\r\n\r\n// Clear errors\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: CLEAR_ERRORS\r\n  }\r\n}\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  dispatch(clearErrors());\r\n  axios\r\n    .post('/api/users/register', userData)\r\n    .then(res => {\r\n      dispatch ({\r\n        type: INITIAL_SIGNUP_SUCCESS,\r\n        payload:true\r\n      })\r\n        setTimeout(function () {\r\n          // after 2 seconds\r\n          window.location = \"/login\";\r\n      }, 2000)\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Login - Get User Token\r\nexport const loginUser = userData => dispatch => {\r\n  dispatch(clearErrors());\r\n  axios\r\n    .post('/api/users/login', userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n      const { token } = res.data;\r\n      // Set token to ls\r\n      localStorage.setItem('jwtToken', token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from localStorage\r\n  localStorage.removeItem('jwtToken');\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}