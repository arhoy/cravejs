{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\cart\\\\Cart.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getUserCart, getCurrentCartTotal, clearUserCart } from '../../actions/cartActions';\nimport { submitOrder } from '../../actions/orderActions';\nimport CartItems from './CartItems';\nimport PayPal from '../utils/PayPal';\nimport LoadingSpinner from '../utils/LoadingSpinner';\nimport isEmpty from '../../validation/is-empty';\n\nclass Cart extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      cart: [],\n      cartTotal: null,\n      cartQuantity: null,\n      loading: true\n    });\n\n    _defineProperty(this, \"transactionSuccessHandler\", data => {\n      // on success call the orders backend api, store order via mongoose.\n      this.props.submitOrder(data); // clear the user cart...\n\n      this.props.clearUserCart(); // push to thank you page\n\n      this.props.history.push('thank-you');\n    });\n\n    _defineProperty(this, \"transactionCanceledHandler\", () => {\n      console.log('user canceled transaction');\n    });\n\n    _defineProperty(this, \"transactionErrorHandler\", () => {\n      console.log('Paypal error');\n    });\n  }\n\n  componentDidMount() {\n    this.props.getUserCart();\n    this.props.getCurrentCartTotal();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      cart\n    } = this.props;\n    const {\n      cartTotal\n    } = this.props.cart;\n\n    if (prevProps.cart !== this.props.cart && this.props.cart.cart.length >= 0) {\n      this.setState({\n        cart: cart.cart,\n        loading: cart.loading,\n        cartTotal: cartTotal.cartTotal,\n        cartQuantity: cartTotal.cartQuantity\n      });\n    }\n  }\n\n  render() {\n    const {\n      cart,\n      loading,\n      cartTotal,\n      cartQuantity\n    } = this.state;\n\n    if (loading || isEmpty(cartTotal)) {\n      return React.createElement(\"div\", {\n        className: \"Cart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Cart__loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Cart is loading\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Please refresh page if loading persists\"), React.createElement(LoadingSpinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })));\n    }\n\n    if (cart.length === 0 && !loading) {\n      return React.createElement(\"div\", {\n        className: \"Cart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Cart__empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Cart__empty-block Cart__empty-block--1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Your Cart is Empty!\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"navigation__link\",\n        to: \"/products\",\n        style: {\n          textDecoration: 'underline'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Search for Products\"))), React.createElement(\"div\", {\n        className: \"Cart__empty-block Cart__empty-block--2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Your Order History\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"navigation__link\",\n        to: \"/orders\",\n        style: {\n          textDecoration: 'underline'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"View Order History\")))));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"Cart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Cart__header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Shopping Cart\"), cart.length > 0 ? React.createElement(\"div\", {\n        className: \"Cart__body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Cart__body-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Items in your cart \", cartQuantity), React.createElement(\"div\", {\n        className: \"Cart__body-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(CartItems, {\n        cart: cart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"Cart__body-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Cart__total\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Total Amount:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, ` $${this.state.cartTotal.toFixed(2)}`)), React.createElement(\"button\", {\n        className: \"Cart__paypal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(PayPal, {\n        toPay: cartTotal,\n        transactionError: this.transactionErrorHandler,\n        transactionCanceled: this.transactionCanceledHandler,\n        transactionSuccess: this.transactionSuccessHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })))) : null);\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  cart: state.cart\n});\n\nexport default connect(mapStateToProps, {\n  getUserCart,\n  getCurrentCartTotal,\n  submitOrder,\n  clearUserCart\n})(withRouter(Cart));","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\cart\\Cart.js"],"names":["React","Component","Link","withRouter","connect","getUserCart","getCurrentCartTotal","clearUserCart","submitOrder","CartItems","PayPal","LoadingSpinner","isEmpty","Cart","cart","cartTotal","cartQuantity","loading","data","props","history","push","console","log","componentDidMount","componentDidUpdate","prevProps","prevState","length","setState","render","state","textDecoration","toFixed","transactionErrorHandler","transactionCanceledHandler","transactionSuccessHandler","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getUserCart,\r\n  getCurrentCartTotal,\r\n  clearUserCart\r\n} from '../../actions/cartActions';\r\nimport { submitOrder } from '../../actions/orderActions';\r\nimport CartItems from './CartItems';\r\nimport PayPal from '../utils/PayPal';\r\nimport LoadingSpinner from '../utils/LoadingSpinner';\r\nimport isEmpty from '../../validation/is-empty';\r\n\r\nclass Cart extends Component {\r\n  state = {\r\n    cart: [],\r\n    cartTotal: null,\r\n    cartQuantity: null,\r\n    loading: true\r\n  };\r\n  componentDidMount() {\r\n    this.props.getUserCart();\r\n    this.props.getCurrentCartTotal();\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { cart } = this.props;\r\n    const { cartTotal } = this.props.cart;\r\n    if (\r\n      prevProps.cart !== this.props.cart &&\r\n      this.props.cart.cart.length >= 0\r\n    ) {\r\n      this.setState({\r\n        cart: cart.cart,\r\n        loading: cart.loading,\r\n        cartTotal: cartTotal.cartTotal,\r\n        cartQuantity: cartTotal.cartQuantity\r\n      });\r\n    }\r\n  }\r\n  transactionSuccessHandler = data => {\r\n    // on success call the orders backend api, store order via mongoose.\r\n    this.props.submitOrder(data);\r\n\r\n    // clear the user cart...\r\n    this.props.clearUserCart();\r\n\r\n    // push to thank you page\r\n    this.props.history.push('thank-you');\r\n  };\r\n  transactionCanceledHandler = () => {\r\n    console.log('user canceled transaction');\r\n  };\r\n  transactionErrorHandler = () => {\r\n    console.log('Paypal error');\r\n  };\r\n\r\n  render() {\r\n    const { cart, loading, cartTotal, cartQuantity } = this.state;\r\n    if (loading || isEmpty(cartTotal)) {\r\n      return (\r\n        <div className=\"Cart\">\r\n          <div className=\"Cart__loading\">\r\n            <div>Cart is loading</div>\r\n            <div>Please refresh page if loading persists</div>\r\n            <LoadingSpinner />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (cart.length === 0 && !loading) {\r\n      return (\r\n        <div className=\"Cart\">\r\n          <div className=\"Cart__empty\">\r\n            <div className=\"Cart__empty-block Cart__empty-block--1\">\r\n              <div>Your Cart is Empty!</div>\r\n              <div>\r\n                <Link\r\n                  className=\"navigation__link\"\r\n                  to=\"/products\"\r\n                  style={{ textDecoration: 'underline' }}\r\n                >\r\n                  Search for Products\r\n                </Link>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"Cart__empty-block Cart__empty-block--2\">\r\n              <div>Your Order History</div>\r\n              <div>\r\n                <Link\r\n                  className=\"navigation__link\"\r\n                  to=\"/orders\"\r\n                  style={{ textDecoration: 'underline' }}\r\n                >\r\n                  View Order History\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"Cart\">\r\n          <div className=\"Cart__header\">Shopping Cart</div>\r\n\r\n          {cart.length > 0 ? (\r\n            <div className=\"Cart__body\">\r\n              <div className=\"Cart__body-1\">\r\n                Items in your cart {cartQuantity}\r\n              </div>\r\n              <div className=\"Cart__body-2\">\r\n                <CartItems cart={cart} />\r\n              </div>\r\n\r\n              <div className=\"Cart__body-3\">\r\n                <div className=\"Cart__total\">\r\n                  Total Amount:\r\n                  <span>{` $${this.state.cartTotal.toFixed(2)}`}</span>\r\n                </div>\r\n                <button className=\"Cart__paypal\">\r\n                  <PayPal\r\n                    toPay={cartTotal}\r\n                    transactionError={this.transactionErrorHandler}\r\n                    transactionCanceled={this.transactionCanceledHandler}\r\n                    transactionSuccess={this.transactionSuccessHandler}\r\n                  />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  cart: state.cart\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getUserCart, getCurrentCartTotal, submitOrder, clearUserCart }\r\n)(withRouter(Cart));\r\n"]},"metadata":{},"sourceType":"module"}