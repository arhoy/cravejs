{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\arhoy\\\\Desktop\\\\cravejs\\\\client\\\\src\\\\components\\\\posts\\\\PostEditForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport TextAreaFieldGroup from '../common/TextAreaFieldGroup';\nimport { addEditPost, getPost } from '../../actions/postActions';\nimport PropTypes from 'prop-types';\n\nvar PostEditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostEditForm, _Component);\n\n  function PostEditForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostEditForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostEditForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      text: '' // errors:{}\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeHandler\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitHandler\", function (e) {\n      e.preventDefault();\n      var postId = _this.props.postId;\n      var user = _this.props.auth.user;\n      var editPost = {\n        text: _this.state.text,\n        name: user.name,\n        avatar: user.avatar\n      };\n      console.log('I was submited', editPost, postId);\n\n      _this.props.addEditPost(postId, editPost); // it will look for postId in the backend\n\n\n      _this.setState({\n        text: ''\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PostEditForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props);\n      var postId = this.props.postId;\n      this.props.getPost(postId);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      // if (nextProps.errors) {\n      //   this.setState({ errors: nextProps.errors });\n      // }\n      console.log('These are the next props', nextProps);\n\n      if (nextProps.post.post) {\n        var post = nextProps.post.post; // set component fields state.\n\n        this.setState({\n          text: post.text\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // const {errors} = this.state;\n      return React.createElement(\"div\", {\n        className: \"PostEditForm\",\n        style: {\n          zIndex: 1000\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"PostEditForm__form\",\n        onSubmit: function onSubmit(e) {\n          return _this2.onSubmitHandler(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form__group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(TextAreaFieldGroup, {\n        placeholder: \"Edit post\",\n        name: \"text\",\n        value: this.state.text,\n        onChange: function onChange(e) {\n          return _this2.onChangeHandler(e);\n        } //  error={errors.text}\n        ,\n        className: \"form__textarea form__textarea-grey\",\n        rows: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"PostEditForm__button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Save Edits\")));\n    }\n  }]);\n\n  return PostEditForm;\n}(Component);\n\nPostEditForm.propTypes = {\n  auth: PropTypes.object.isRequired,\n  addEditPost: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    post: state.post\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addEditPost: addEditPost,\n  getPost: getPost\n})(withRouter(PostEditForm));","map":{"version":3,"sources":["C:\\Users\\arhoy\\Desktop\\cravejs\\client\\src\\components\\posts\\PostEditForm.js"],"names":["React","Component","connect","withRouter","TextAreaFieldGroup","addEditPost","getPost","PropTypes","PostEditForm","text","e","setState","target","name","value","preventDefault","postId","props","user","auth","editPost","state","avatar","console","log","nextProps","post","zIndex","onSubmitHandler","onChangeHandler","propTypes","object","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport TextAreaFieldGroup from '../common/TextAreaFieldGroup';\r\nimport { addEditPost, getPost } from '../../actions/postActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PostEditForm extends Component {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n        const {postId} = this.props;\r\n        this.props.getPost(postId);\r\n\r\n    }\r\n    \r\n    state = {\r\n        text: '',\r\n       // errors:{}\r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps) {\r\n        // if (nextProps.errors) {\r\n        //   this.setState({ errors: nextProps.errors });\r\n        // }\r\n        console.log('These are the next props',nextProps)\r\n        if(nextProps.post.post){\r\n            const post = nextProps.post.post;\r\n\r\n            // set component fields state.\r\n            this.setState({\r\n                text: post.text\r\n              });\r\n    \r\n        }\r\n      }\r\n      \r\n    \r\n    onChangeHandler = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        const {postId} = this.props;\r\n        const { user } = this.props.auth;\r\n        const editPost = {\r\n            text: this.state.text,\r\n            name: user.name,\r\n            avatar: user.avatar\r\n        }\r\n        console.log('I was submited',editPost,postId);\r\n         this.props.addEditPost(postId,editPost); // it will look for postId in the backend\r\n         this.setState({text:''});\r\n    \r\n        \r\n    }\r\n    \r\n    \r\n    render() {\r\n       // const {errors} = this.state;\r\n\r\n        return (\r\n    \r\n            <div className = \"PostEditForm\" style = {{zIndex: 1000}}>\r\n               <form className = \"PostEditForm__form\" onSubmit={ (e)=> this.onSubmitHandler(e) }>\r\n                  <div className=\"form__group\">\r\n                    <TextAreaFieldGroup\r\n                      placeholder=\"Edit post\"\r\n                      name=\"text\"\r\n                      value={this.state.text}\r\n                      onChange={ (e)=> this.onChangeHandler(e)}\r\n                    //  error={errors.text}\r\n                      className = \"form__textarea form__textarea-grey\"\r\n                      rows = {5}\r\n                    />\r\n                  </div>\r\n                    <button type=\"submit\" className=\"PostEditForm__button\">\r\n                        Save Edits\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nPostEditForm.propTypes = {\r\n     auth: PropTypes.object.isRequired,\r\n     addEditPost:PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    post: state.post\r\n  });\r\n\r\n\r\nexport default connect(mapStateToProps,{ addEditPost,getPost })(withRouter(PostEditForm));"]},"metadata":{},"sourceType":"module"}